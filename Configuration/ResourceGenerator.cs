using NFive.PluginManager.Models;
using NFive.SDK.Plugins.Configuration;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace NFive.PluginManager.Configuration
{
	/// <summary>
	/// Represent and generate a FiveM Lua resource file.
	/// </summary>
	public static class ResourceGenerator
	{
		/// <summary>
		/// Gets or sets the FiveM resource manifest version.
		/// </summary>
		/// <value>
		/// The resource manifest version.
		/// </value>
		public static Guid ManifestVersion { get; set; } = new Guid("44febabe-d386-4d18-afbe-5e627f4af937");

		/// <summary>
		/// Gets the default sever scripts.
		/// </summary>
		/// <value>
		/// The default sever scripts.
		/// </value>
		public static IEnumerable<string> DefaultSeverScripts => new List<string>
		{
			"NFive.Server.net.dll"
		};

		/// <summary>
		/// Gets the default client scripts.
		/// </summary>
		/// <value>
		/// The default client scripts.
		/// </value>
		public static IEnumerable<string> DefaultClientScripts => new List<string>
		{
			"NFive.Client.net.dll"
		};

		/// <summary>
		/// Gets the default client files.
		/// </summary>
		/// <value>
		/// The default client files.
		/// </value>
		public static IEnumerable<string> DefaultClientFiles => new List<string>
		{
			"Newtonsoft.Json.dll",
			"System.ComponentModel.DataAnnotations.dll",

			"NFive.SDK.Core.net.dll",
			"NFive.SDK.Client.net.dll",

			"index.html"
		};

		/// <summary>
		/// Serializes the specified <see cref="DefinitionGraph"/> to a FiveM Lua resource file format.
		/// </summary>
		/// <param name="graph">The definition graph to serialize.</param>
		/// <returns>The definition graph in FiveM Lua resource file format.</returns>
		public static void Serialize(DefinitionGraph graph)
		{
			var output = new StringBuilder();

			output.AppendLine("-- FiveM resource definition");
			output.AppendLine("-- This file is automatically generated with `nfpm install` - any manual changes will be lost");
			output.AppendLine();

			output.AppendLine($"resource_manifest_version '{ManifestVersion.ToString()}'");
			output.AppendLine();

			output.AppendLine("server_scripts {");
			output.AppendLine("\t-- NFive");
			foreach (var file in DefaultSeverScripts) output.AppendLine($"\t'{file}',");
			output.AppendLine("}");
			output.AppendLine();

			output.AppendLine("client_scripts {");
			foreach (var plugin in graph.Plugins.Where(d => d.Client?.Include?.Count > 0 || d.Client?.Main?.Count > 0))
			{
				output.AppendLine($"\t-- {plugin.Name}@{plugin.Version}");
				if (plugin.Client?.Include != null) foreach (var file in plugin.Client.Include) output.AppendLine($"\t'{Path.Combine(ConfigurationManager.PluginPath, plugin.Name.Vendor, plugin.Name.Project, file).Replace(Path.DirectorySeparatorChar, '/')}.net.dll',");
				if (plugin.Client?.Main != null) foreach (var file in plugin.Client.Main) output.AppendLine($"\t'{Path.Combine(ConfigurationManager.PluginPath, plugin.Name.Vendor, plugin.Name.Project, file).Replace(Path.DirectorySeparatorChar, '/')}.net.dll',");
				output.AppendLine();
			}
			output.AppendLine("\t-- NFive");
			foreach (var file in DefaultClientScripts) output.AppendLine($"\t'{file}',");
			output.AppendLine("}");
			output.AppendLine();

			output.AppendLine("files {");
			output.AppendLine("\t-- NFive");
			foreach (var file in DefaultClientFiles) output.AppendLine($"\t'{file}',");
			foreach (var plugin in graph.Plugins.Where(d => d.Client?.Files?.Count > 0 || d.Client?.Overlays?.Count > 0))
			{
				output.AppendLine();
				output.AppendLine($"\t-- {plugin.Name}@{plugin.Version}");
				foreach (var file in plugin.Client.Files) output.AppendLine($"\t'{Path.Combine(ConfigurationManager.PluginPath, plugin.Name.Vendor, plugin.Name.Project, file).Replace(Path.DirectorySeparatorChar, '/')}',");
			}
			output.AppendLine("}");

			var loadscreen = graph.Plugins.FirstOrDefault(d => d.Client?.LoadingScreen != null);
			if (loadscreen != null)
			{
				output.AppendLine();
				output.AppendLine($"-- {loadscreen.Name}@{loadscreen.Version}");
				output.AppendLine($"loadscreen '{Path.Combine(ConfigurationManager.PluginPath, loadscreen.Name.Vendor, loadscreen.Name.Project, loadscreen.Client.LoadingScreen).Replace(Path.DirectorySeparatorChar, '/')}'");
			}

			output.AppendLine();
			output.AppendLine("-- NFive");
			output.AppendLine("ui_page 'index.html'");

			File.WriteAllText(Path.Combine(Environment.CurrentDirectory, ConfigurationManager.ResourceFile), output.ToString());
		}
	}
}
